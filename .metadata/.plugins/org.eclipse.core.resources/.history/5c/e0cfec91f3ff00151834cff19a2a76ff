/*
 * TODO.cpp
 *
 *  Created on: Apr 10, 2016
 *      Author: Budi Ryan
 */
#include "TODO.h"

/*
 *
 * IMPLEMENTATION OF WEAPONRIFLE
 *
 *
 */
WeaponRifle::WeaponRifle() {
	weapon_name = "Rifle";
	min_range = 1;
	max_range = 8;
	power = 10;
}

WeaponRifle::~WeaponRifle() {
}

int WeaponRifle::attack() {
	return power;
}

bool WeaponRifle::isInRange(int att_x, int att_y, int ene_x, int ene_y) const {
	int distance = abs(att_x - ene_x) + abs(att_y - ene_y);
	if (distance >= min_range && distance <= max_range
			&& (att_x == ene_x || att_y == ene_y))
		return true;

	return false;
}

/*
 *
 *
 * IMPLEMENTATION OF WEAPONSUPERRIFLE
 *
 *
 */
WeaponSuperRifle::WeaponSuperRifle() {
	weapon_name = "Super Rifle";
	min_range = 1;
	max_range = 10;
	power = 15;
}

WeaponSuperRifle::~WeaponSuperRifle() {
}

int WeaponSuperRifle::attack() {
	return power;
}

bool WeaponSuperRifle::isInRange(int att_x, int att_y, int ene_x,
		int ene_y) const {
	int distance = abs(att_x - ene_x) + abs(att_y - ene_y);
	if (distance >= min_range && distance <= max_range
			&& (att_x == ene_x || att_y == ene_y))
		return true;

	return false;
}

/*
 *
 *
 * IMPLEMENTATION OF WEAPONMISSLE
 *
 *
 */
WeaponMissle::WeaponMissle(int p) {
	weapon_name = "Missle";
	min_range = 3;
	max_range = 8;
	power = p;
	usedForAttack = false;
	healing = false;
}

WeaponMissle::~WeaponMissle() {

}

int WeaponMissle::attack() {
	if (!usedForAttack) {
		usedForAttack = true;
		min_range = 0;
		max_range = 0;
		return power;
	}
	return power;
}

void WeaponMissle::toggleHealingStatus() {
	switch (healing) {
	case true:
		healing = false;
		break;
	case false:
		healing = true;
		break;
	}
}

bool WeaponMissle::isInRange(int att_x, int att_y, int ene_x, int ene_y) const {
	int distance = abs(att_x - ene_x) + abs(att_y - ene_y);
	if (healing == true) {
		if (distance == 1)
			return true;
		else
			return false;
	} else {
		if (distance >= min_range && distance <= max_range)
			return true;
		else
			return false;
	}
	return false;
}

/*
 *
 *
 * IMPLEMENTATION FOR WEAPONFIST
 *
 *
 */
WeaponFist::WeaponFist(int p) {
	weapon_name = "Fist";
	min_range = 1;
	max_range = 1;
	power = p;
}

WeaponFist::~WeaponFist() {
}

int WeaponFist::attack() {
	return power;
}

/*
 *
 *
 * IMPLEMENTATION OF ROBOTHEALER
 *
 *
 */

RobotHealer::RobotHealer(string s, int health, int speeds, int attk, int deff) :
		Robot(s, health, speeds, attk, deff) {}

RobotHealer::~RobotHealer() {}

bool RobotHealer :: isInRange(int aX, int aY) const {
	if (aX < 0 || aX > ARENA_W || aY < 0 || aY > ARENA_H)
		return false;

	if (abs(aX - x) + abs(aY - y) <= speed) {
		return true;
	}
	return false;
}

int RobotHealer::attack(Robot * robot, Weapon * weapon) {
	int enemyX;
	int enemyY;
	robot->getXY(enemyX, enemyY);
	if ((robot->getAlly() == getAlly())
			&& (abs(enemyX - x) + abs(enemyY - y) == 1)) {
		//heal the shit, extra conditioning first
		if ((robot->getHP() + 100) >= robot->getMaxHP()) {
			robot->setHP(robot->getMaxHP());
			return (-1 * (robot->getMaxHP() - robot->getHP()));
		} else {
			robot->setHP(robot->getHP() + 100);
			return (-1 * 100);
		}
	}
	if (robot->getAlly() == getAlly()
			|| !(weapon->isInRange(x, y, enemyX, enemyY)))
		return 0;

	int damage;

//Make a case for special weapons
//Case for Weapon Fist
	if (weapon->getName() == "Fist" && getAlly() != robot->getAlly()) {
		if (robot->getAtt() >= att) {
			damage = max((robot->getAtt() * weapon->attack() - getDef()), 1);
			setHP(hp - damage);
			return (-1 * damage);
		} else {
			damage = max((getAtt() * weapon->attack() - robot->getDef()), 1);
			robot->setHP(robot->getHP() - damage);
			return damage;
		}
	} else {
		damage = max(att * weapon->attack() - robot->getDef(), 1);
		robot->setHP(robot->getHP() - damage);
		return damage;
	}

}


/*
 *
 *
 * IMPLEMENTATION OF ROBOTHOPPER
 *
 *
 */
RobotHopper :: RobotHopper(string n, int health, int attk, int deff): Robot(n, health, 3 , attk, deff){}

RobotHopper :: ~RobotHopper(){}

bool RobotHopper :: isInRange(int aX, int aY) const;

/*
 *
 *
 * REDEFINITION OF ROBOT::ATTACK() FUNCTION
 *
 *
 */

int Robot::attack(Robot* robot, Weapon* weapon) {
	if (robot == nullptr || weapon == nullptr)
		return 0;

	if (robot->my_ally == this->my_ally
			|| !(weapon->isInRange(x, y, robot->x, robot->y)))
		return 0;

	int damage = max(this->att * weapon->attack() - robot->def, 1);
	robot->setHP(robot->hp - damage);
	return damage;
}

