#include "Triangle.h"
#include <iostream>
#include <stdlib.h>
#include <cmath>
#include <limits>
using namespace std;

Triangle :: Triangle(const Point2D points[],int numPoints):Polygon(points,numPoints){
	if(this->n_points != 3){
		cout<<"Illegal! Number of points should be 3"<<endl;
		exit(1); //Exit the program
	}
}

Triangle :: ~Triangle(){
	cout<<"Triangle's destructor"<<endl;
}

void Triangle :: print()const{
	this->print();
	cout<<"Triangle's perimeter: "<<this->perimeter()<<endl;
	cout<<"Triangle's area: "<<this->area()<<endl;
}

double Triangle :: perimeter() const{
	double left = (points[0].y - points[1].y) * (points[2].x - points[1].x);
	double right = (points[2].y - points[1].y) * (points[0].x - points[1].x);
	bool collinear = fabs(left - right) < numeric_limits<double>::epsilon() ? true : false;
	if(collinear){
		return 0.0;
	}
	else{
		//Compute the length of each vertice
		int a,b,c;
		a = sqrt(pow((points[0].x - points[1].x), 2.0) - pow((points[0].y - points[1].y), 2.0));
		b = sqrt(pow((points[0].x - points[2].x), 2.0) - pow((points[0].y - points[2].y), 2.0));
		c = sqrt(pow((points[1].x - points[2].x), 2.0) - pow((points[1].y - points[2].y), 2.0));
		return a+b+c;
	}
}

double Triangle :: area() const{
	double left = (points[0].y - points[1].y) * (points[2].x - points[1].x);
	double right = (points[2].y - points[1].y) * (points[0].x - points[1].x);
	bool collinear = fabs(left - right) < numeric_limits<double>::epsilon() ? true : false;
	if(collinear){
		return 0.0;
	}

}
