#ifndef __TODO
#define __TODO
#include "Robot.h"
#include "Weapon.h"
#include <iostream>
#include <cmath>
using namespace std;

class WeaponRifle: public Weapon {
public:
	WeaponRifle();

	bool isInRange(int att_x, int att_y, int ene_x, int ene_y) const;

	virtual ~WeaponRifle();

	virtual int attack();

protected:
};

class WeaponSuperRifle: public Weapon {
public:
	WeaponSuperRifle();

	bool isInRange(int att_x, int att_y, int ene_x, int ene_y) const;

	virtual ~WeaponSuperRifle();

	virtual int attack();
protected:
};

class WeaponMissle: public Weapon {
public:
	WeaponMissle(int p);

	virtual ~WeaponMissle();

	virtual int attack();

	void useMissleForHealing();

	void restoreOriginalRange();

protected:
	bool usedForAttack;
};

class WeaponFist: public Weapon {
public:
	WeaponFist(int p);

	virtual ~WeaponFist();

	virtual int attack();

protected:
};

class RobotHealer: public Robot {
public:
	RobotHealer(string s, int health, int speeds, int attk, int deff);

	virtual ~RobotHealer();

	virtual int attack(Robot * robot, Weapon * weapon);

protected:

};

class RobotHopper: public Robot {
public:
	RobotHopper(string, int health, int attk, int deff);

	virtual ~RobotHopper();

	virtual void move(int aX, int aY);

	virtual int attack(RobotHopper*, Weapon*);


protected:

};

#endif
