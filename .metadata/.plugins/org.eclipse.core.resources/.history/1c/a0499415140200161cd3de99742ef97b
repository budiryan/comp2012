/*
 * TODO.h
 *
 *  Created on: Apr 11, 2016
 *      Author: jeffrywicaksana
 */

#ifndef TODO_H_
#define TODO_H_

#include "Weapon.h"
#include "Robot.h"
#include "Arena.h"
#include <stdlib.h>

using namespace std;


class WeaponRifle: public Weapon{
public:
	WeaponRifle();
	//Destructor, adding virtual only for easy reading
	virtual ~WeaponRifle();
	//Return Attack Power
	virtual int attack();
	//Check Attack Possibility
	virtual bool isInRange(int, int, int, int) const;
};

class WeaponSuperRifle:public Weapon{
public:
	WeaponSuperRifle();
	//Destructor
	virtual ~WeaponSuperRifle();
	//Return Attack Power
	virtual int attack();
	//Check Attack Possibility
	virtual bool isInRange(int, int, int, int) const;
};

class WeaponMissle:public Weapon{
public:
	WeaponMissle(int = 100);
	//Destructor
	virtual ~WeaponMissle();
	//Return Attack Power
	virtual int attack();
	//Check Attack Possibility
	virtual bool isInRange(int, int, int, int) const;
private:
	bool shoot_count;
};

class WeaponFist:public Weapon{
public:
	WeaponFist(int = 100);
	//Destructor
	virtual ~WeaponFist();
	//Return Attack Power
	virtual int attack();
	//Check Attack Possibility
	virtual bool isInRange(int, int, int, int) const;
};
/*
 *
 * Now, we are declaring the class for robot
 * There are only 3 types of robot
 */
class RobotHealer:virtual public Robot{
public:
	RobotHealer(string, int, int ,int, int);
	~RobotHealer();
	virtual int attack(Robot*, Weapon*);
};

class RobotHopper:virtual public Robot{
public:
	RobotHopper(string, int, int,int);
	~RobotHopper();
	virtual bool isInRange(int aX,int aY) const;
};

class RobotHoppingHealer:public RobotHealer, public RobotHopper{
public:
	RobotHoppingHealer(string, int, int,int);
	~RobotHoppingHealer();
};
#endif /* TODO_H_ */
