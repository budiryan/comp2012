/*
 * Robot.cpp
 *
 *  Created on: Feb 24, 2016
 *      Author: kevinw
 */

#include "Robot.h"
#include <cmath>
#include <iostream>

extern const int ARENA_W;
extern const int ARENA_H;

const char* ALLYNAME[3] = { "Warrior", "Enemy", "Unknown" };

using namespace std;


Robot::Robot(string aName, int aMax_hp, int aSpeed, int aAtt, int aDef) :
		name(aName), max_hp(aMax_hp), speed(aSpeed), att(aAtt), def(aDef) {
	x = 0;
	y = 0;
	num_of_weapons = 0;
	hp = max_hp;
	endTurn = false;
	my_ally = ALL_ROBOTS;
}

Robot::~Robot() {
	for (int i = 0; i < num_of_weapons; i++)
		delete weapons[i];
}

#ifndef _TESTING

int Robot::attack(Robot* robot, Weapon* weapon) {
	if (robot == nullptr || weapon == nullptr)
		return 0;

	if (robot->my_ally == this->my_ally || !(weapon->isInRange(x, y, robot->x, robot->y)))
		return 0;

	int damage = max(this->att * weapon->attack() - robot->def, 1);
	robot->setHP(robot->hp - damage);
	return damage;
}

#endif

void Robot::setWeapon(Weapon* aWeapons[], int count) {
	for (int i = 0; i < num_of_weapons; i++)
		delete weapons[i];

	num_of_weapons = count;

	for (int i = 0; i < count; i++) {
		weapons[i] = aWeapons[i];
	}

}

// this function does not change if the current location is occupied by some other robots.
bool Robot::isInRange(int aX, int aY) const {
	if (aX < 0 || aX > ARENA_W || aY < 0 || aY > ARENA_H)
		return false;

	if (abs(aX - x) + abs(aY - y) <= speed) {
		return true;
	}

	return false;

}

void Robot::setHP(int a) {
	hp = a;

	if (hp >= max_hp)
		hp = max_hp;

	if (hp <= 0)
		hp = 0;
}
