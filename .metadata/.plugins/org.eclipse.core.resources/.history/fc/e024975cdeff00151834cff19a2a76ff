/*
 * TODO.cpp
 *
 *  Created on: Apr 10, 2016
 *      Author: Budi Ryan
 */
#include "TODO.h"

/*
 *
 * IMPLEMENTATION OF WEAPONRIFLE
 *
 *
 */
WeaponRifle::WeaponRifle() {
	weapon_name = "Rifle";
	min_range = 1;
	max_range = 8;
	power = 10;
}

WeaponRifle::~WeaponRifle() {
}

int WeaponRifle::attack() {
	return power;
}

bool WeaponRifle::isInRange(int att_x, int att_y, int ene_x, int ene_y) const {
	int distance = abs(att_x - ene_x) + abs(att_y - ene_y);
	if (distance >= min_range && distance <= max_range
			&& (att_x == ene_x || att_y == ene_y))
		return true;

	return false;
}

/*
 *
 *
 * IMPLEMENTATION OF WEAPONSUPERRIFLE
 *
 *
 */
WeaponSuperRifle::WeaponSuperRifle() {
	weapon_name = "Super Rifle";
	min_range = 1;
	max_range = 10;
	power = 15;
}

WeaponSuperRifle::~WeaponSuperRifle() {
}

int WeaponSuperRifle::attack() {
	return power;
}

bool WeaponSuperRifle::isInRange(int att_x, int att_y, int ene_x,
		int ene_y) const {
	int distance = abs(att_x - ene_x) + abs(att_y - ene_y);
	if (distance >= min_range && distance <= max_range
			&& (att_x == ene_x || att_y == ene_y))
		return true;

	return false;
}

/*
 *
 *
 * IMPLEMENTATION OF WEAPONMISSLE
 *
 *
 */
WeaponMissle::WeaponMissle(int p) {
	weapon_name = "Missle";
	min_range = 3;
	max_range = 8;
	power = p;
	usedForAttack = false;
}

WeaponMissle::~WeaponMissle() {

}

int WeaponMissle::attack() {
	if (!usedForAttack) {
		usedForAttack = true;
		min_range = 0;
		max_range = 0;
		return power;
	}
	return power;
}

/*
 *
 *
 * IMPLEMENTATION FOR WEAPONFIST
 *
 *
 */
WeaponFist::WeaponFist(int p) {
	weapon_name = "Fist";
	min_range = 1;
	max_range = 1;
	power = p;
}

WeaponFist::~WeaponFist() {
}

int WeaponFist::attack() {
	return power;
}

/*
 *
 *
 * IMPLEMENTATION OF ROBOTHEALER
 *
 *
 */

RobotHealer::RobotHealer(string s, int health, int speeds, int attk, int deff) :
		Robot(s, health, speeds, attk, deff) {
}

RobotHealer::~RobotHealer() {

}

int RobotHealer:: attack(Robot * robot, Weapon * weapon) {
	int enemyX;
	int enemyY;
	robot->getXY(enemyX,enemyY);
	if ((robot->getAlly() == getAlly())
			&& (abs(enemyX - x) + abs(enemyY - y) == 1)) {
		//heal the shit, extra conditioning first
		if ((robot->getHP() + 100) >= robot->getMaxHP())
			return -100;
	}
	if (robot->getAlly() == getAlly()
			|| !(weapon->isInRange(x, y, enemyX, enemyY)))
		return 0;

	int damage;

	//Make a case for special weapons
	//Case for Weapon Fist
	if (weapon->getName() == "Fist" && getAlly() != robot->getAlly()) {
		if (robot->getAtt() >= att) {
			damage = max((robot->getAtt() * weapon->attack() - getDef()), 1);
			setHP(hp - damage);
			return (-1 * damage);
		} else {
			damage = max((getAtt() * weapon->attack() - robot->getDef()), 1);
			robot->setHP(robot->getHP() - damage);
			return damage;
		}
	} else {
		damage = max(att * weapon->attack() - robot->def, 1);
		robot->setHP(robot->hp - damage);
		return damage;
	}

}

